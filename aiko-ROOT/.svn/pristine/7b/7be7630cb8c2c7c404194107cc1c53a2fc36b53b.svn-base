package chinapay.util;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;

/**
 * 
 * 公共使用方法提取类
 * @author Administrator
 *
 */
public class CommonUtil {
	
	public static  Logger log = Logger.getLogger(CommonUtil.class);
	
	
	/**
	 * 
	 * 获取request<获取参数map>
	 * 
	 * @return 参数map
	 * @throws Exception
	 */
	public static Map<String, Object> getParameterMap(HttpServletRequest request) throws Exception {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			@SuppressWarnings("unchecked")
			Map<String, String[]> tempMap = request.getParameterMap();
			Set<String> keys = tempMap.keySet();
			for (String key : keys) {
				byte source[] = request.getParameter(key).getBytes("UTF-8");
				String modelname = new String(source, "UTF-8");
				resultMap.put(key, modelname);
			}
		} catch (Exception e) {
			log.error("getParameterMap error  :" + e);
		}
		return resultMap;
	}

	/**
	 * 
	 * listMap
	 * 
	 * @return 参数map
	 * @throws Exception
	 */
	public static List<Map<String, Object>> getParameterlistMap(HttpServletRequest request) throws Exception {
		List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();
		try {
			@SuppressWarnings("unchecked")
			Map<String, String[]> tempMap = request.getParameterMap();
			Set<String> keys = tempMap.keySet();
			for (String key : keys) {
				Map<String, Object> resultMap = new HashMap<String, Object>();
				byte source[] = request.getParameter(key).getBytes("UTF-8");
				String modelname = new String(source, "UTF-8");
				resultMap.put(key, modelname);
				listMap.add(resultMap);
			}
		} catch (Exception e) {
			log.error("getParameterlistMap   error   :" + e);
		}
		return listMap;
	}
	
	
	/**
	 * 
	 * 查询 exe是否存活windwos进程
	 * 
	 * @param exeName
	 * @return
	 * @throws Exception
	 */
	public static boolean  getExeState(String exeName) throws Exception {
		BufferedReader bufferedReader = null;
		try {
			Process proc = Runtime.getRuntime().exec("tasklist");
			bufferedReader = new BufferedReader(new InputStreamReader(proc.getInputStream()));
			String line = null;
			while ((line = bufferedReader.readLine()) != null) {
				if (line.contains(exeName)) {
					return true;
				}
			}
		} catch (Exception ex) {
			log.error("getExeState   error " + ex.getMessage(), ex);
			return false;
		} finally {
			if (bufferedReader != null) {
				try {
					bufferedReader.close();
				} catch (Exception ex) {
					log.error("getExeState error 2 " + ex.getMessage(), ex);
				}
			}
		}
		return false;
	}
	

	/**
	 * 启动exe进程
	 * 
	 * @param exeName exe名称，不需要.exe
	 * 
	 * @param exePath  exe全路径包括.exe
	 * 
	 * @return state:sucees（启动成功） fail(启动失败\或者路径错误) repeat（进程已存在,无需重启）
	 * @throws Exception
	 */
	public static String  openExe(String exeName,String exePath) throws Exception {
		String sucees = "success";
		try {
			if(getExeState(exeName)) {
				sucees="repeat";
			}else {
				Desktop.getDesktop().open(new File(exePath));
				return "success";
			}
		} catch (IOException ex) {
			log.error("openExe   error " + ex.getMessage(), ex);
			return "fail";
		} 
		return sucees;
	}
	
	public static void main(String[] args) throws Exception {
		System.out.println(openExe("yuceA","E:\\yuceA\\yuceA.exe"));
	}
	
	
}
